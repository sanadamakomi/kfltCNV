pdf('testSample_state.png', width = 8, height = 3)
plotKfltResult(system.file("extdata", 'testSample.state', package = "kfltCNV"))
dev.off()
getwd()
pdf('testSample_state.pdf', width = 8, height = 3)
plotKfltResult(system.file("extdata", 'testSample.state', package = "kfltCNV"))
dev.off()
#' @import ggplot2
#' @importFrom ggplot2 ggplot
#' @importFrom grDevices pdf
#' @importFrom grDevices dev.off
#' @importFrom utils read.table
#' @importFrom utils write.table
#' @author Zhan-Ni Chen
#' @examples
#' ####### Plot kflt results #######
#' plotKfltResult(system.file("extdata", 'testSample.state', package = "kfltCNV"))
plotKfltResult <- function(file) {
write(paste0('Start to plot\nfile:\n', file), stdout())
indat <- read.table(file, header = TRUE, sep = "\t", quote = "", comment.char = "#", na.strings = "NA",
fill = TRUE, stringsAsFactors = FALSE)
allchr <- as.character(as.vector(indat[,1]))
unique_chr <- unique(allchr)
if (grepl('chr', unique_chr[1])) {
unique_chr <- factor(unique_chr, levels = c(paste0('chr', seq(1, 22, 1)), 'chrX', 'chrY'))
} else {
unique_chr <- factor(unique_chr, levels = c(as.character(seq(1, 22, 1)), 'X', 'Y'))
}
unique_chr <- sort(unique_chr)
unique_chr <- as.character(as.vector(unique_chr))
for (chr in unique_chr) {
idx <- which(allchr %in% chr)
df <- indat[idx, ]
if (nrow(na.omit(df)) == 0) next
df <- df[with(df, order(start, end)), ]
gr <- slidingWindows(GRanges(Rle(chr), IRanges(start = 1, end = max(df[, 'end']))), width = 1E7, step =  1E7)
gr <- unlist(gr)
pos_label <- as.character(end(gr)/1E6)
pos_label[length(pos_label)] <- ''
pos_label <- c('0', pos_label)
df$report <- as.factor(df$report)
cols <- c("average" = "gray50", "gain" = "red", "loss" = "green1")
cols <- cols[unique(as.character(as.vector(df$report)))]
p <- ggplot(df, aes_string(x = 'end', y = 'log2ratio', color = 'report')) +
geom_ribbon(aes_string(ymin = 'statUp', ymax = 'statDown'),
fill = "gray", color = NA, alpha = 0.5) +
geom_point(aes_string(y = "log2ratio"), na.rm = TRUE, size = 0.4) +
scale_colour_manual(values = cols, guide = FALSE) +
scale_y_continuous(limits = c(-4, 4)) +
scale_x_continuous(breaks = c(0, end(gr)), labels = pos_label )+
labs(title = paste0('chromosome ', chr),
x = 'Chromosome Position (Mb)',
y = 'Log2 Ratio') +
theme_bw()+
theme(legend.title = element_text( size = rel(2.5)), legend.position = 'bottom',
axis.text.x = element_text(size = 10, angle = 90))
print(p)
}
}
pdf('testSample_state.pdf', width = 8, height = 3)
plotKfltResult(system.file("extdata", 'testSample.state', package = "kfltCNV"))
dev.off()
roxygen2::roxygenize(package.dir = "C:/rfile/20181201/kfltCNV")
devtools::build_vignettes()
devtools::build_manual(pkg = ".", path = './doc')
devtools::build(vignettes = TRUE, manual = TRUE)
remove.packages("kfltCNV")
devtools::install(build_vignettes = TRUE)
browseVignettes('kfltCNV')
remove.packages("kfltCNV")
browseVignettes('kfltCNV')
devtools::install_github('sanadamakomi/kfltCNV',
build = TRUE, build_opts = c("--no-resave-data"), force = TRUE)
browseVignettes('kfltCNV')
remove.packages("kfltCNV")
roxygen2::roxygenize(package.dir = "C:/rfile/20181201/kfltCNV")
devtools::check(manual = TRUE)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_manual(pkg = ".", path = './doc')
devtools::build(vignettes = TRUE, manual = TRUE)
devtools::build(vignettes = TRUE, manual = TRUE)
remove.packages("kfltCNV")
devtools::install(build_vignettes = TRUE)
browseVignettes('kfltCNV')
remove.packages("kfltCNV")
devtools::install_github('sanadamakomi/kfltCNV',
build = TRUE, build_opts = c("--no-resave-data"), force = TRUE)
browseVignettes('kfltCNV')
