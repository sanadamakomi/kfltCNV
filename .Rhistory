-  using log directory 'C:/Users/chenzn/AppData/Local/Temp/RtmpYDbiSk/kfltCNV.Rcheck' (625ms)
-  using R version 3.5.1 (2018-07-02)
-  using platform: x86_64-w64-mingw32 (64-bit)
-  using session charset: CP936
-  using option '--as-cran' (1.9s)
√  checking for file 'kfltCNV/DESCRIPTION'
-  this is package 'kfltCNV' version '0.0.1'
-  package encoding: UTF-8
√  checking package namespace information ...
√  checking package dependencies (3.7s)
√  checking if this is a source package ...
√  checking if there is a namespace
√  checking for executable files (461ms)
√  checking for hidden files and directories ...
√  checking for portable file names ...
√  checking serialization versions
√  checking whether package 'kfltCNV' can be installed (45s)
N  checking installed package size ...
installed size is 15.9Mb
sub-directories of 1Mb or more:
extdata  14.9Mb
√  checking package directory (1.1s)
√  checking 'build' directory
√  checking DESCRIPTION meta-information (742ms)
√  checking top-level files
√  checking for left-over files ...
√  checking index information (803ms)
√  checking package subdirectories (864ms)
√  checking R files for non-ASCII characters (409ms)
√  checking R files for syntax errors ...
√  checking whether the package can be loaded (7.2s)
√  checking whether the package can be loaded with stated dependencies (6.5s)
√  checking whether the package can be unloaded cleanly (7.5s)
√  checking whether the namespace can be loaded with stated dependencies (6.5s)
√  checking whether the namespace can be unloaded cleanly (7.4s)
√  checking loading without being on the library search path (6.8s)
√  checking dependencies in R code (7.6s)
√  checking S3 generic/method consistency (7.9s)
√  checking replacement functions (6.6s)
√  checking foreign function calls (7.1s)
√  checking R code for possible problems (27.1s)
√  checking Rd files (829ms)
√  checking Rd metadata ...
√  checking Rd line widths (363ms)
√  checking Rd cross-references (1s)
√  checking for missing documentation entries (7s)
√  checking for code/documentation mismatches (20.3s)
√  checking Rd \usage sections (8.5s)
√  checking Rd contents (349ms)
√  checking for unstated dependencies in examples (691ms)
√  checking installed files from 'inst/doc' ...
√  checking files in 'vignettes' ...
√  checking examples (19.1s)
√  checking for unstated dependencies in vignettes (764ms)
√  checking package vignettes in 'inst/doc' ...
√  checking re-building of vignette outputs (3.9s)
-  checking PDF version of manual (7.6s)
OK
See
'C:/Users/chenzn/AppData/Local/Temp/RtmpYDbiSk/kfltCNV.Rcheck/00check.log'
for details.
Warning in readChar(path, nchars = file.info(path)$size, ...) :
can only read in bytes in a non-UTF-8 MBCS locale
-- R CMD check results ----------------------------------------------------- kfltCNV 0.0.1 ----
Duration: 3m 47s
> checking installed package size ... NOTE
installed size is 15.9Mb
sub-directories of 1Mb or more:
extdata  14.9Mb
0 errors √ | 0 warnings √ | 1 note x
> testBamFile <- system.file("extdata", 'testSample.bam', package = "kfltCNV")
> controlBamFile <- c(system.file("extdata", 'controlSample.bam', package = "kfltCNV"),
+                     system.file("extdata", 'controlSample2.bam', package = "kfltCNV"))
> bedFile <- system.file("extdata", 'chr10_exome.bed', package = "kfltCNV")
> kfltBatch(testBamFile, controlBamFile = controlBamFile, bedFile = bedFile)
Use target region BED file to calculate coverage.
Target will not be splited
Perform calculating coverage.
Perform BAM:
C:/rfile/20181201/kfltCNV/inst/extdata/testSample.bam
Done.
Use target region BED file to calculate coverage.
Target will not be splited
Perform calculating coverage.
Perform BAM:
C:/rfile/20181201/kfltCNV/inst/extdata/controlSample.bam
Perform BAM:
C:/rfile/20181201/kfltCNV/inst/extdata/controlSample2.bam
Done.
Start to create log2 ratio file
testFile:
C:\rfile\20181201\kfltCNV/testSample.cov
baselineFile:
controlFile:
C:\rfile\20181201\kfltCNV/controlSample.cov
C:\rfile\20181201\kfltCNV/controlSample2.cov
Start Kalman filtering
Model:
p = 0, d = 1, q = 5, sn = 2.5, method = nlminb, bin.size = 120
Files:
C:\rfile\20181201\kfltCNV/testSample.fit
Start calling CNVs
File:
C:\rfile\20181201\kfltCNV/testSample.state
Merge CNV gap small than gapwidth:	0 bp
Log2 ratio threshold:	0
Minimun probe counts supporting CNV:	1
Output file type:	vcf, table
Start to plot
file:
C:\rfile\20181201\kfltCNV/testSample.state
null device
1
Warning message:
In if (length(controlBamFile) == 1 & grepl(",", controlBamFile)) { :
the condition has length > 1 and only the first element will be used
> length(controlBamFile)
[1] 2
> grepl(",", controlBamFile)
[1] FALSE FALSE
> roxygen2::roxygenize(package.dir = "C:/rfile/20181201/kfltCNV")
Writing NAMESPACE
Loading kfltCNV
Writing NAMESPACE
> devtools::check(manual=TRUE)
Updating kfltCNV documentation
Writing NAMESPACE
Loading kfltCNV
Writing NAMESPACE
-- Building --------------------------------------------------------- kfltCNV --
Setting env vars:
* CFLAGS    : -Wall -pedantic -fdiagnostics-color=always
* CXXFLAGS  : -Wall -pedantic -fdiagnostics-color=always
* CXX11FLAGS: -Wall -pedantic -fdiagnostics-color=always
--------------------------------------------------------------------------------
√  checking for file 'C:\rfile\20181201\kfltCNV/DESCRIPTION' (415ms)
-  preparing 'kfltCNV': (621ms)
√  checking DESCRIPTION meta-information ...
-  installing the package to build vignettes (456ms)
√  creating vignettes (17.8s)
-  checking for LF line-endings in source and make files and shell scripts (350ms)
-  checking for empty or unneeded directories
-  building 'kfltCNV_0.0.1.tar.gz'
-- Checking --------------------------------------------------------- kfltCNV --
Setting env vars:
* _R_CHECK_CRAN_INCOMING_USE_ASPELL_: TRUE
* _R_CHECK_CRAN_INCOMING_REMOTE_    : FALSE
* _R_CHECK_CRAN_INCOMING_           : FALSE
* _R_CHECK_FORCE_SUGGESTS_          : FALSE
-- R CMD check --------------------------------------------------------------------------------
-  using log directory 'C:/Users/chenzn/AppData/Local/Temp/RtmpYDbiSk/kfltCNV.Rcheck' (388ms)
-  using R version 3.5.1 (2018-07-02)
-  using platform: x86_64-w64-mingw32 (64-bit)
-  using session charset: CP936
-  using option '--as-cran' (934ms)
√  checking for file 'kfltCNV/DESCRIPTION'
-  this is package 'kfltCNV' version '0.0.1'
-  package encoding: UTF-8
√  checking package namespace information ...
√  checking package dependencies (12.6s)
√  checking if this is a source package ...
√  checking if there is a namespace
√  checking for executable files (454ms)
√  checking for hidden files and directories ...
√  checking for portable file names ...
√  checking serialization versions
√  checking whether package 'kfltCNV' can be installed (23.4s)
N  checking installed package size ...
installed size is 15.9Mb
sub-directories of 1Mb or more:
extdata  14.9Mb
√  checking package directory (1s)
√  checking 'build' directory
√  checking DESCRIPTION meta-information (703ms)
√  checking top-level files
√  checking for left-over files ...
√  checking index information (824ms)
√  checking package subdirectories (995ms)
√  checking R files for non-ASCII characters ...
√  checking R files for syntax errors ...
√  checking whether the package can be loaded (6.4s)
√  checking whether the package can be loaded with stated dependencies (5.4s)
√  checking whether the package can be unloaded cleanly (5.4s)
√  checking whether the namespace can be loaded with stated dependencies (5.5s)
√  checking whether the namespace can be unloaded cleanly (6s)
√  checking loading without being on the library search path (6.1s)
√  checking dependencies in R code (5.9s)
√  checking S3 generic/method consistency (7.1s)
√  checking replacement functions (5.9s)
√  checking foreign function calls (5.8s)
√  checking R code for possible problems (22.5s)
√  checking Rd files (457ms)
√  checking Rd metadata ...
√  checking Rd line widths ...
√  checking Rd cross-references (358ms)
√  checking for missing documentation entries (5.9s)
√  checking for code/documentation mismatches (17.5s)
√  checking Rd \usage sections (7.6s)
√  checking Rd contents (345ms)
√  checking for unstated dependencies in examples (577ms)
√  checking installed files from 'inst/doc' ...
√  checking files in 'vignettes' ...
√  checking examples (17.2s)
√  checking for unstated dependencies in vignettes (650ms)
√  checking package vignettes in 'inst/doc' ...
√  checking re-building of vignette outputs (4.2s)
-  checking PDF version of manual (6.1s)
OK
See
'C:/Users/chenzn/AppData/Local/Temp/RtmpYDbiSk/kfltCNV.Rcheck/00check.log'
for details.
Warning in readChar(path, nchars = file.info(path)$size, ...) :
can only read in bytes in a non-UTF-8 MBCS locale
-- R CMD check results ----------------------------------------------------- kfltCNV 0.0.1 ----
Duration: 3m 7s
> checking installed package size ... NOTE
installed size is 15.9Mb
sub-directories of 1Mb or more:
extdata  14.9Mb
0 errors √ | 0 warnings √ | 1 note x
> baselineFile <- system.file("extdata", 'baseline.cov', package = "kfltCNV")
> kfltBatch(testBamFile, baselineFile = baselineFile, bedFile = bedFile)
Use target region BED file to calculate coverage.
Target will not be splited
Perform calculating coverage.
Perform BAM:
C:/rfile/20181201/kfltCNV/inst/extdata/testSample.bam
Done.
Show Traceback
Rerun with Debug
Error in performFitCovFile(testFile = testFile, path = paste0(outDir,  :
Coverage files do not share the same region.
> baselineFile <- system.file("extdata", 'baseline.cov', package = "kfltCNV")
> kfltBatch(testBamFile, baselineFile = baselineFile, bedFile = bedFile)
Use target region BED file to calculate coverage.
Target will not be splited
Perform calculating coverage.
Perform BAM:
C:/rfile/20181201/kfltCNV/inst/extdata/testSample.bam
Done.
Start to create log2 ratio file
testFile:
C:\rfile\20181201\kfltCNV/testSample.cov
baselineFile:
C:/rfile/20181201/kfltCNV/inst/extdata/baseline.cov
controlFile:
Start Kalman filtering
Model:
p = 0, d = 1, q = 5, sn = 2.5, method = nlminb, bin.size = 120
Files:
C:\rfile\20181201\kfltCNV/testSample.fit
Start calling CNVs
File:
C:\rfile\20181201\kfltCNV/testSample.state
Merge CNV gap small than gapwidth:	0 bp
Log2 ratio threshold:	0
Minimun probe counts supporting CNV:	1
Output file type:	vcf, table
Start to plot
file:
C:\rfile\20181201\kfltCNV/testSample.state
null device
1
> kfltBatch(testBamFile, mode = "shuffle", bedFile = bedFile, outDir = 'C:/rfile/20181201/test2')
Use target region BED file to calculate coverage.
Target will not be splited
Perform calculating coverage.
Perform BAM:
C:/rfile/20181201/kfltCNV/inst/extdata/testSample.bam
Done.
Start creating baseline
Mode:	shuffle
Files:
C:/rfile/20181201/test2/testSample.cov
If shuffle depth by chr:	FALSE
Start to create log2 ratio file
testFile:
C:/rfile/20181201/test2/testSample.cov
baselineFile:
C:/rfile/20181201/test2/baseline.cov
controlFile:
Start Kalman filtering
Model:
p = 0, d = 1, q = 5, sn = 2.5, method = nlminb, bin.size = 120
Files:
C:/rfile/20181201/test2/testSample.fit
Start calling CNVs
File:
C:/rfile/20181201/test2/testSample.state
Merge CNV gap small than gapwidth:	0 bp
Log2 ratio threshold:	0
Minimun probe counts supporting CNV:	1
Output file type:	vcf, table
Start to plot
file:
C:/rfile/20181201/test2/testSample.state
null device
1
> kfltBatch(testBamFile, mode = "movingAverage", bedFile = bedFile, outDir = 'C:/rfile/20181201/test2')
Use target region BED file to calculate coverage.
Target will not be splited
Perform calculating coverage.
Perform BAM:
C:/rfile/20181201/kfltCNV/inst/extdata/testSample.bam
Done.
Start creating baseline
Mode:	movingAverage
Files:
C:/rfile/20181201/test2/testSample.cov
Step by moving average:	10
Start to create log2 ratio file
testFile:
C:/rfile/20181201/test2/testSample.cov
baselineFile:
C:/rfile/20181201/test2/baseline.cov
controlFile:
Start Kalman filtering
Model:
p = 0, d = 1, q = 5, sn = 2.5, method = nlminb, bin.size = 120
Files:
C:/rfile/20181201/test2/testSample.fit
Start calling CNVs
File:
C:/rfile/20181201/test2/testSample.state
Merge CNV gap small than gapwidth:	0 bp
Log2 ratio threshold:	0
Minimun probe counts supporting CNV:	1
Output file type:	vcf, table
Start to plot
file:
C:/rfile/20181201/test2/testSample.state
null device
1
> kfltBatch(testBamFile, baselineFile = baselineFile, bedFile = bedFile,outDir="C:/rfile/20181201/test2")
Use target region BED file to calculate coverage.
Target will not be splited
Perform calculating coverage.
Perform BAM:
C:/rfile/20181201/kfltCNV/inst/extdata/testSample.bam
Done.
Start to create log2 ratio file
testFile:
C:/rfile/20181201/test2/testSample.cov
baselineFile:
C:/rfile/20181201/kfltCNV/inst/extdata/baseline.cov
controlFile:
Start Kalman filtering
Model:
p = 0, d = 1, q = 5, sn = 2.5, method = nlminb, bin.size = 120
Files:
C:/rfile/20181201/test2/testSample.fit
Start calling CNVs
File:
C:/rfile/20181201/test2/testSample.state
Merge CNV gap small than gapwidth:	0 bp
Log2 ratio threshold:	0
Minimun probe counts supporting CNV:	1
Output file type:	vcf, table
Start to plot
file:
C:/rfile/20181201/test2')
kfltBatch(testBamFile, baselineFile = baselineFile, bedFile = bedFile,outDir="C:/rfile/20181201/test2")
kfltBatch(testBamFile, controlBamFile = controlBamFile, bedFile = bedFile, annote.database = annotateFile, outDir = 'outDir="C:/rfile/20181201/test2')
testBamFile <- system.file("extdata", 'testSample.bam', package = "kfltCNV")
controlBamFile <- c(system.file("extdata", 'controlSample.bam', package = "kfltCNV"),
system.file("extdata", 'controlSample2.bam', package = "kfltCNV"))
bedFile <- system.file("extdata", 'chr10_exome.bed', package = "kfltCNV")
annotateFile <- system.file("extdata", 'hg19_refGene_chr10.txt', package = "kfltCNV")
kfltBatch(testBamFile, controlBamFile = controlBamFile, bedFile = bedFile, annote.database = annotateFile, outDir = 'outDir="C:/rfile/20181201/test2')
kfltBatch(testBamFile, controlBamFile = controlBamFile, bedFile = bedFile, annote.database = annotateFile, outDir = 'outDir="C:/rfile/20181201/test2')
kfltBatch(testBamFile, controlBamFile = controlBamFile, bedFile = bedFile, annote.database = annotateFile, outDir = 'C:/rfile/20181201/test2')
annotate <- system.file("extdata", 'hg19_refGene_chr10.txt', package = "kfltCNV")
annotate
read.table(annotate, header = FALSE)
system.file("extdata", 'hg19_refGene_chr10.txt', package = "kfltCNV")
refGeneData <- read.table(annotateFile, header = FALSE)
colnames(refGeneData)[c(1:6, 13)] <- c('EntrezID', 'TranscriptName', 'Chromosome', 'Strand', 'TranscriptStart', 'TranscriptEnd', 'GeneSymbol')
head(refGeneData)
refGeneData
annotateFile
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
bed <- system.file("extdata", 'chr10_exome.bed', package = "kfltCNV")
bedData <- read.table(bed, header = FALSE)
colnames(bedData) <- c('Chromosome', 'Start', 'End')
knitr::kable(head(bedData, 6))
bed
requireNamespace("devtools", quietly = TRUE)
browseVignettes(package = 'knitr')
Rpkg
library(kfltCNV)
roxygen2::roxygenize(package.dir = "C:/rfile/20181201/kfltCNV")
?splitBed
bamSeqinfo <- seqinfo(BamFile(testBam))
testBam <- system.file("extdata", 'testSample.bam', package = "kfltCNV")
# one or more control BAM files
controlBam1 <- system.file("extdata", 'controlSample.bam', package = "kfltCNV")
controlBam2 <- system.file("extdata", 'controlSample2.bam', package = "kfltCNV")
controlBam <- c(controlBam1, controlBam2)
allBam <- c(testBam, controlBam)
# BED file
bed <- system.file("extdata", 'chr10_exome.bed', package = "kfltCNV")
# Annotation file
annotate <- system.file("extdata", 'hg19_refGene_chr10.txt', package = "kfltCNV")
# Baseline file
baseline <- system.file("extdata", 'baseline.cov', package = "kfltCNV")
splitBed(bed, width = 1E2)
bamSeqinfo <- seqinfo(BamFile(testBam))
bamSeqinfo
splitGenome(bamSeqinfo, width = 1E5)
region <- bedtoGRange(bed, bamSeqinfo)
region
testCov <- depthOfRegion(region, bamPath = testBam)
contolCov1 <- depthOfRegion(region, bamPath = controlBam1)
contolCov2 <- depthOfRegion(region, bamPath = controlBam2)
head(testCov)
testCov <- system.file("extdata", 'testSample.cov', package = "kfltCNV")
contolCov1 <- system.file("extdata", 'controlSample.cov', package = "kfltCNV")
contolCov2 <- system.file("extdata", 'controlSample2.cov', package = "kfltCNV")
region <- bedtoGRange(bed, bamSeqinfo)
gr <- depthOfRegion(region, bamPath = testBam)
head(gr)
covmatrix <- mergerCovFiles(c(testCov, contolCov1, contolCov2))
head(covmatrix )
covmatrix.nor <- normalizeCovMatrix(covmatrix)
head(covmatrix.nor)
baseline.control <- createControlBaseline(covmatrix.nor[,-4])
head( baseline.control)
baseline.moveaverage <- createMoveAveBaseline(covmatrix.nor[,1:4], step=10)
head(baseline.moveaverage)
baseline.shuffle <- createShuffleBaseline(covmatrix.nor[,1:4])
baseline.moveaverage <- createMoveAveBaseline(covmatrix.nor[,1:4], step=10)
head(baseline.control)
calculateLog2ratio(covmatrix.nor[,4], baseline.control[,4], badDepth = 1)
kflt(
yt = matrix(data = log2ratio, nrow = 1),
ct = matrix(data = 1, nrow = 1))
log2ratio <- calculateLog2ratio(covmatrix.nor[,4], baseline.control[,4], badDepth = 1)
kflt(
yt = matrix(data = log2ratio, nrow = 1),
ct = matrix(data = 1, nrow = 1))
baseline
performRunKflt(fitFile, binSize = 1E2, outPrefix = 'C:/rfile/20181201/test2')
fitFile <- system.file("extdata", 'testSample.fit', package = "kfltCNV")
performRunKflt(fitFile, binSize = 1E2, outPrefix = 'C:/rfile/20181201/test2')
annote
annotate
?kfltBatch
roxygen2::roxygenize(package.dir = "C:/rfile/20181201/kfltCNV")
stateFile <- system.file("extdata", 'testSample.state', package = "kfltCNV")
plotKfltResult(stateFile)
plotKfltResult
roxygen2::roxygenize(package.dir = "C:/rfile/20181201/kfltCNV")
plotKfltResult
devtools::check(manual=TRUE)
plotKfltResult
#' @import ggplot2
#' @importFrom ggplot2 ggplot
#' @importFrom grDevices pdf
#' @importFrom grDevices dev.off
#' @importFrom utils read.table
#' @importFrom utils write.table
#' @author Zhan-Ni Chen
#' @examples
#' ####### Plot kflt results #######
#' plotKfltResult(system.file("extdata", 'testSample.state', package = "kfltCNV"))
plotKfltResult <- function(file) {
write(paste0('Start to plot\nfile:\n', file), stdout())
id <- rev(unlist(strsplit(file, "/")))[1]
id <- unlist(strsplit(id, "\\."))[1]
indat <- read.table(file, header = TRUE, sep = "\t", quote = "", comment.char = "#", na.strings = "NA",
fill = TRUE, stringsAsFactors = FALSE)
allchr <- as.character(as.vector(indat[,1]))
unique_chr <- unique(allchr)
if (grepl('chr', unique_chr[1])) {
unique_chr <- factor(unique_chr, levels = c(paste0('chr', seq(1, 22, 1)), 'chrX', 'chrY'))
} else {
unique_chr <- factor(unique_chr, levels = c(as.character(seq(1, 22, 1)), 'X', 'Y'))
}
unique_chr <- sort(unique_chr)
unique_chr <- as.character(as.vector(unique_chr))
for (chr in unique_chr) {
idx <- which(allchr %in% chr)
df <- indat[idx, ]
if (nrow(na.omit(df)) == 0) next
df <- df[with(df, order(start, end)), ]
gr <- slidingWindows(GRanges(Rle(chr), IRanges(start = 1, end = max(df[, 'end']))), width = 1E7, step =  1E7)
gr <- unlist(gr)
pos_label <- as.character(end(gr)/1E6)
pos_label[length(pos_label)] <- ''
pos_label <- c('0', pos_label)
plot_df <- data.frame(position = c(df[, 'end'], df[, 'end'], df[, 'end']),
log2ratio = c(df[, 'statUp'], df[, 'statDown'], df[, 'log2ratio']),
report = c(rep('ci',nrow(df)), rep('ci', nrow(df)), df[, 'report']))
plot_df$report <- as.factor(plot_df$report)
cols <- c("ci" = "gray", "average" = "gray50", "gain" = "red", "loss" = "green1")
cols <- cols[unique(as.character(as.vector(plot_df$report)))]
p <- ggplot(plot_df, aes_string(x = 'position', y = 'log2ratio', color = 'report')) +
geom_point(na.rm = TRUE, size = 0.3) +
scale_colour_manual(values = cols, guide = FALSE) +
scale_y_continuous(limits = c(-4, 4)) +
scale_x_continuous(breaks = c(0, end(gr)), labels = pos_label )+
labs(title = paste0('chromosome ', chr),
x = 'Chromosome Position (Mb)',
y = 'Log2 Ratio') +
theme(legend.title = element_text( size = rel(2.5)), legend.position = 'bottom', axis.text.x = element_text(size = 10, angle = 90))
print(p)
}
}
plotKfltResult(stateFile)
